<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.yanmai.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="org.yanmai.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userid" property="userid" jdbcType="VARCHAR" />
    <result column="companyid" property="companyid" jdbcType="VARCHAR" />
    <result column="UID" property="uid" jdbcType="VARCHAR" />
    <result column="job_number" property="jobNumber" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="doccode" property="doccode" jdbcType="VARCHAR" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="companyname" property="companyname" jdbcType="VARCHAR" />
    <result column="createTime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="statu" property="statu" jdbcType="INTEGER" />
    <result column="roleId" property="roleid" jdbcType="INTEGER" />
    <result column="roleName" property="rolename" jdbcType="VARCHAR" />
    <result column="apporve" property="apporve" jdbcType="INTEGER" />
    <result column="registered" property="registered" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, userid, companyid, UID, job_number, name, doccode, account, email, password, 
    companyname, createTime, statu, roleId, roleName, apporve, registered
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.yanmai.model.example.UserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.yanmai.model.example.UserExample" >
    delete from t_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.yanmai.model.User" >
    insert into t_user (id, userid, companyid, 
      UID, job_number, name, 
      doccode, account, email, 
      password, companyname, createTime, 
      statu, roleId, roleName, 
      apporve, registered)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=VARCHAR}, #{companyid,jdbcType=VARCHAR}, 
      #{uid,jdbcType=VARCHAR}, #{jobNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{doccode,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{companyname,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP}, 
      #{statu,jdbcType=INTEGER}, #{roleid,jdbcType=INTEGER}, #{rolename,jdbcType=VARCHAR},
      #{apporve,jdbcType=INTEGER}, #{registered,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.yanmai.model.User" >
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userid != null" >
        userid,
      </if>
      <if test="companyid != null" >
        companyid,
      </if>
      <if test="uid != null" >
        UID,
      </if>
      <if test="jobNumber != null" >
        job_number,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="doccode != null" >
        doccode,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="companyname != null" >
        companyname,
      </if>
      <if test="createtime != null" >
        createTime,
      </if>
      <if test="statu != null" >
        statu,
      </if>
      <if test="roleid != null" >
        roleId,
      </if>
      <if test="rolename != null" >
        roleName,
      </if>
      <if test="apporve != null" >
        apporve,
      </if>
      <if test="registered != null" >
        registered,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="companyid != null" >
        #{companyid,jdbcType=VARCHAR},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="jobNumber != null" >
        #{jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="doccode != null" >
        #{doccode,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="companyname != null" >
        #{companyname,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="statu != null" >
        #{statu,jdbcType=INTEGER},
      </if>
      <if test="roleid != null" >
        #{roleid,jdbcType=INTEGER},
      </if>
      <if test="rolename != null" >
        #{rolename,jdbcType=VARCHAR},
      </if>
      <if test="apporve != null" >
        #{apporve,jdbcType=INTEGER},
      </if>
      <if test="registered != null" >
        #{registered,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.yanmai.model.example.UserExample" resultType="java.lang.Integer" >
    select count(*) from t_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_user
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userid = #{record.userid,jdbcType=VARCHAR},
      </if>
      <if test="record.companyid != null" >
        companyid = #{record.companyid,jdbcType=VARCHAR},
      </if>
      <if test="record.uid != null" >
        UID = #{record.uid,jdbcType=VARCHAR},
      </if>
      <if test="record.jobNumber != null" >
        job_number = #{record.jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.doccode != null" >
        doccode = #{record.doccode,jdbcType=VARCHAR},
      </if>
      <if test="record.account != null" >
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.companyname != null" >
        companyname = #{record.companyname,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null" >
        createTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.statu != null" >
        statu = #{record.statu,jdbcType=INTEGER},
      </if>
      <if test="record.roleid != null" >
        roleId = #{record.roleid,jdbcType=INTEGER},
      </if>
      <if test="record.rolename != null" >
        roleName = #{record.rolename,jdbcType=VARCHAR},
      </if>
      <if test="record.apporve != null" >
        apporve = #{record.apporve,jdbcType=INTEGER},
      </if>
      <if test="record.registered != null" >
        registered = #{record.registered,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_user
    set id = #{record.id,jdbcType=INTEGER},
      userid = #{record.userid,jdbcType=VARCHAR},
      companyid = #{record.companyid,jdbcType=VARCHAR},
      UID = #{record.uid,jdbcType=VARCHAR},
      job_number = #{record.jobNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      doccode = #{record.doccode,jdbcType=VARCHAR},
      account = #{record.account,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      companyname = #{record.companyname,jdbcType=VARCHAR},
      createTime = #{record.createtime,jdbcType=TIMESTAMP},
      statu = #{record.statu,jdbcType=INTEGER},
      roleId = #{record.roleid,jdbcType=INTEGER},
      roleName = #{record.rolename,jdbcType=VARCHAR},
      apporve = #{record.apporve,jdbcType=INTEGER},
      registered = #{record.registered,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.yanmai.model.User" >
    update t_user
    <set >
      <if test="userid != null" >
        userid = #{userid,jdbcType=VARCHAR},
      </if>
      <if test="companyid != null" >
        companyid = #{companyid,jdbcType=VARCHAR},
      </if>
      <if test="uid != null" >
        UID = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="jobNumber != null" >
        job_number = #{jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="doccode != null" >
        doccode = #{doccode,jdbcType=VARCHAR},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="companyname != null" >
        companyname = #{companyname,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="statu != null" >
        statu = #{statu,jdbcType=INTEGER},
      </if>
      <if test="roleid != null" >
        roleId = #{roleid,jdbcType=INTEGER},
      </if>
      <if test="rolename != null" >
        roleName = #{rolename,jdbcType=VARCHAR},
      </if>
      <if test="apporve != null" >
        apporve = #{apporve,jdbcType=INTEGER},
      </if>
      <if test="registered != null" >
        registered = #{registered,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.yanmai.model.User" >
    update t_user
    set userid = #{userid,jdbcType=VARCHAR},
      companyid = #{companyid,jdbcType=VARCHAR},
      UID = #{uid,jdbcType=VARCHAR},
      job_number = #{jobNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      doccode = #{doccode,jdbcType=VARCHAR},
      account = #{account,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      companyname = #{companyname,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      statu = #{statu,jdbcType=INTEGER},
      roleId = #{roleid,jdbcType=INTEGER},
      roleName = #{rolename,jdbcType=VARCHAR},
      apporve = #{apporve,jdbcType=INTEGER},
      registered = #{registered,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>